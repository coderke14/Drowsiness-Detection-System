from scipy.spatial import distance
from imutils import face_utils
from pygame import mixer
import imutils
import dlib
import cv2
import os

# ============ Initial Setup ============

# Load the alert sound
if not os.path.exists("music.wav"):
    print("Error: music.wav file not found!")
    exit()

mixer.init()
mixer.music.load("music.wav")

# EAR calculation function
def eye_aspect_ratio(eye):
    A = distance.euclidean(eye[1], eye[5])
    B = distance.euclidean(eye[2], eye[4])
    C = distance.euclidean(eye[0], eye[3])
    ear = (A + B) / (2.0 * C)
    return ear

# Thresholds
EAR_THRESHOLD = 0.25
CONSECUTIVE_FRAMES = 20

# Initialize dlib's face detector and landmark predictor
try:
    detector = dlib.get_frontal_face_detector()
    predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")
except RuntimeError as e:
    print("Error loading dlib predictor:", e)
    exit()

# Get eye indexes
(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["right_eye"]

# Start video capture
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("Error: Could not open webcam.")
    exit()

flag = 0
alarm_on = False

# ============ Main Loop ============
while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame from webcam.")
        break

    frame = imutils.resize(frame, width=450)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    faces = detector(gray, 0)
    for face in faces:
        shape = predictor(gray, face)
        shape = face_utils.shape_to_np(shape)

        leftEye = shape[lStart:lEnd]
        rightEye = shape[rStart:rEnd]
        leftEAR = eye_aspect_ratio(leftEye)
        rightEAR = eye_aspect_ratio(rightEye)
        ear = (leftEAR + rightEAR) / 2.0

        # Debug: Show EAR value on screen
        cv2.putText(frame, f"EAR: {ear:.2f}", (350, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (100, 255, 100), 1)

        # Draw eye contours
        cv2.drawContours(frame, [cv2.convexHull(leftEye)], -1, (0, 255, 0), 1)
        cv2.drawContours(frame, [cv2.convexHull(rightEye)], -1, (0, 255, 0), 1)

        # Check for drowsiness
        if ear < EAR_THRESHOLD:
            flag += 1

            if flag >= CONSECUTIVE_FRAMES:
                cv2.putText(frame, "DROWSINESS ALERT!", (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

                # Play sound once when alarm is not already playing
                if not alarm_on:
                    mixer.music.play()
                    alarm_on = True
        else:
            flag = 0
            alarm_on = False
            mixer.music.stop()

    # Display the frame
    cv2.imshow("Drowsiness Detection", frame)

    # Quit when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# ============ Cleanup ============
cap.release()
cv2.destroyAllWindows()
